var ui =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./public/scripts/confetti.js":
/*!************************************!*\
  !*** ./public/scripts/confetti.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("const defaultColors = [\r\n  '#a864fd',\r\n  '#29cdff',\r\n  '#78ff44',\r\n  '#ff718d',\r\n  '#fdff6a'\r\n];\r\n\r\nfunction createElements(root, elementCount, colors) {\r\n  return Array\r\n    .from({ length: elementCount })\r\n    .map((_, index) => {\r\n      const element = document.createElement('div');\r\n      const color = colors[index % colors.length];\r\n      element.style['background-color']= color; // eslint-disable-line space-infix-ops\r\n      element.style.width = '10px';\r\n      element.style.height = '10px';\r\n      element.style.position = 'absolute';\r\n      root.appendChild(element);\r\n      return element;\r\n    });\r\n}\r\n\r\nfunction randomPhysics(angle, spread, startVelocity, random) {\r\n  const radAngle = angle * (Math.PI / 180);\r\n  const radSpread = spread * (Math.PI / 180);\r\n  return {\r\n    x: 0,\r\n    y: 0,\r\n    wobble: random() * 10,\r\n    velocity: (startVelocity * 0.5) + (random() * startVelocity),\r\n    angle2D: -radAngle + ((0.5 * radSpread) - (random() * radSpread)),\r\n    angle3D: -(Math.PI / 4) + (random() * (Math.PI / 2)),\r\n    tiltAngle: random() * Math.PI\r\n  };\r\n}\r\n\r\nfunction updateFetti(fetti, progress, decay) {\r\n  /* eslint-disable no-param-reassign */\r\n  fetti.physics.x += Math.cos(fetti.physics.angle2D) * fetti.physics.velocity;\r\n  fetti.physics.y += Math.sin(fetti.physics.angle2D) * fetti.physics.velocity;\r\n  fetti.physics.z += Math.sin(fetti.physics.angle3D) * fetti.physics.velocity;\r\n  fetti.physics.wobble += 0.1;\r\n  fetti.physics.velocity *= decay;\r\n  fetti.physics.y += 3;\r\n  fetti.physics.tiltAngle += 0.1;\r\n\r\n  const { x, y, tiltAngle, wobble } = fetti.physics;\r\n  const wobbleX = x + (10 * Math.cos(wobble));\r\n  const wobbleY = y + (10 * Math.sin(wobble));\r\n  const transform = `translate3d(${wobbleX}px, ${wobbleY}px, 0) rotate3d(1, 1, 1, ${tiltAngle}rad)`;\r\n\r\n  fetti.element.style.transform = transform;\r\n  fetti.element.style.opacity = 1 - progress;\r\n\r\n  /* eslint-enable */\r\n}\r\n\r\nfunction animate(root, fettis, decay) {\r\n  const totalTicks = 200;\r\n  let tick = 0;\r\n\r\n  function update() {\r\n    fettis.forEach((fetti) => updateFetti(fetti, tick / totalTicks, decay));\r\n\r\n    tick += 1;\r\n    if (tick < totalTicks) {\r\n      requestAnimationFrame(update);\r\n    } else {\r\n      fettis.forEach((fetti) => {\r\n        if (fetti.element.parentNode === root) {\r\n          return root.removeChild(fetti.element);\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  requestAnimationFrame(update);\r\n}\r\n\r\nfunction confetti(root, {\r\n    angle = 90,\r\n    decay = 0.9,\r\n    spread = 45,\r\n    startVelocity = 45,\r\n    elementCount = 50,\r\n    colors = defaultColors,\r\n    random = Math.random,\r\n  } = {}) {\r\n  const elements = createElements(root, elementCount, colors);\r\n  const fettis = elements.map((element) => ({\r\n    element,\r\n    physics: randomPhysics(angle, spread, startVelocity, random)\r\n  }));\r\n\r\n  animate(root, fettis, decay);\r\n}\r\n\n\n//# sourceURL=webpack://ui/./public/scripts/confetti.js?");

/***/ }),

/***/ "./public/scripts/history.js":
/*!***********************************!*\
  !*** ./public/scripts/history.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// global reference to the history; shouldn't be directly accessed outside\r\n// this file.\r\n//\r\n// If we are using a remote backend cache the value here for easy access once\r\n// we've done an initial retrieval\r\nvar _history = null;\r\n\r\n// this tracks if we're using local storage or some remote user system to\r\n// keep timing data\r\nvar _historyUsesLocalStorage = true;\r\n\r\n// the key we store timing data under when in local storage mode\r\nvar _historyKey = 'response_history';\r\n\r\n///////////////////////////////////////////////////////////////////////////////\r\n\r\n// If we are storing things remotely the code to get them goes here\r\nfunction getRemoteHistory() {\r\n    console.error('User accounts not yet implemented.');\r\n    return null;\r\n}\r\n\r\n// as above except saving\r\nfunction saveRemoteHistory() {\r\n    console.error('User accounts not yet implementhed.');\r\n    return false;\r\n}\r\n\r\n// ensures that history has been loaded; returns true on success\r\nfunction loadHistory() {\r\n    if (_history !== null) {\r\n        return true;\r\n    }\r\n\r\n    if (!_historyUsesLocalStorage) {\r\n        var history = getRemoteHistory();\r\n        if (history === null) {\r\n            console.error('Falling back to local history');\r\n        } else {\r\n            _history = history;\r\n            return true;\r\n        }\r\n    }\r\n\r\n    var history = localStorage.getItem(_historyKey);\r\n    if (history == null) {\r\n        localStorage.setItem(_historyKey, JSON.stringify({}));\r\n        history = \"{}\";\r\n    }\r\n    _history = JSON.parse(history);\r\n    return true;\r\n}\r\n\r\n// saves history; returns true on success\r\nfunction saveHistory() {\r\n    if (!_historyUsesLocalStorage) {\r\n        if (saveRemoteHistory()) {\r\n            return true;\r\n        }\r\n        console.error('Falling back to local history');\r\n    }\r\n\r\n    localStorage.setItem(_historyKey, JSON.stringify(_history));\r\n    return true;\r\n}\r\n\r\n// clears historic timing data and saves the cleared state; returns true on\r\n// success\r\nfunction clearHistory() {\r\n    _history = {};\r\n    return saveHistory();\r\n}\r\n\r\n// returns an array with timing data for a given question number\r\nfunction getHistory(questionNo) {\r\n    if (!loadHistory()) {\r\n        console.error('Unable to load history for question ' + questionNo);\r\n        return [];\r\n    }\r\n    \r\n    var record = _history[questionNo];\r\n    return !!record ? record : [];\r\n}\r\n\r\n// record the time taken to answer a given question based on the question\r\n// number\r\nfunction recordAnswer(questionNo, timeSpentMS) {\r\n    if (!loadHistory()) {\r\n        console.error('Unable to record new time for question ' + questionNo);\r\n        return false;\r\n    }\r\n\r\n    // check for existing timing data, initialize if none found\r\n    if (!_history[questionNo]) {\r\n        _history[questionNo] = [];\r\n    }\r\n    _history[questionNo].push(timeSpentMS);\r\n    return true;\r\n}\r\n\r\nmodule.exports = {\r\n    getHistory: getHistory,\r\n  };\n\n//# sourceURL=webpack://ui/./public/scripts/history.js?");

/***/ }),

/***/ "./public/scripts/keymaster.js":
/*!*************************************!*\
  !*** ./public/scripts/keymaster.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("//     keymaster.js\r\n//     (c) 2011-2013 Thomas Fuchs\r\n//     keymaster.js may be freely distributed under the MIT license.\r\n\r\n;(function(global){\r\n  var k,\r\n    _handlers = {},\r\n    _mods = { 16: false, 18: false, 17: false, 91: false },\r\n    _scope = 'all',\r\n    // modifier keys\r\n    _MODIFIERS = {\r\n      '⇧': 16, shift: 16,\r\n      '⌥': 18, alt: 18, option: 18,\r\n      '⌃': 17, ctrl: 17, control: 17,\r\n      '⌘': 91, command: 91\r\n    },\r\n    // special keys\r\n    _MAP = {\r\n      backspace: 8, tab: 9, clear: 12,\r\n      enter: 13, 'return': 13,\r\n      esc: 27, escape: 27, space: 32,\r\n      left: 37, up: 38,\r\n      right: 39, down: 40,\r\n      del: 46, 'delete': 46,\r\n      home: 36, end: 35,\r\n      pageup: 33, pagedown: 34,\r\n      ',': 188, '.': 190, '/': 191,\r\n      '`': 192, '-': 189, '=': 187,\r\n      ';': 186, '\\'': 222,\r\n      '[': 219, ']': 221, '\\\\': 220\r\n    },\r\n    code = function(x){\r\n      return _MAP[x] || x.toUpperCase().charCodeAt(0);\r\n    },\r\n    _downKeys = [];\r\n\r\n  for(k=1;k<20;k++) _MAP['f'+k] = 111+k;\r\n\r\n  // IE doesn't support Array#indexOf, so have a simple replacement\r\n  function index(array, item){\r\n    var i = array.length;\r\n    while(i--) if(array[i]===item) return i;\r\n    return -1;\r\n  }\r\n\r\n  // for comparing mods before unassignment\r\n  function compareArray(a1, a2) {\r\n    if (a1.length != a2.length) return false;\r\n    for (var i = 0; i < a1.length; i++) {\r\n        if (a1[i] !== a2[i]) return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  var modifierMap = {\r\n      16:'shiftKey',\r\n      18:'altKey',\r\n      17:'ctrlKey',\r\n      91:'metaKey'\r\n  };\r\n  function updateModifierKey(event) {\r\n      for(k in _mods) _mods[k] = event[modifierMap[k]];\r\n  };\r\n\r\n  // handle keydown event\r\n  function dispatch(event) {\r\n    var key, handler, k, i, modifiersMatch, scope;\r\n    key = event.keyCode;\r\n\r\n    if (index(_downKeys, key) == -1) {\r\n        _downKeys.push(key);\r\n    }\r\n\r\n    // if a modifier key, set the key.<modifierkeyname> property to true and return\r\n    if(key == 93 || key == 224) key = 91; // right command on webkit, command on Gecko\r\n    if(key in _mods) {\r\n      _mods[key] = true;\r\n      // 'assignKey' from inside this closure is exported to window.key\r\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = true;\r\n      return;\r\n    }\r\n    updateModifierKey(event);\r\n\r\n    // see if we need to ignore the keypress (filter() can can be overridden)\r\n    // by default ignore key presses if a select, textarea, or input is focused\r\n    if(!assignKey.filter.call(this, event)) return;\r\n\r\n    // abort if no potentially matching shortcuts found\r\n    if (!(key in _handlers)) return;\r\n\r\n    scope = getScope();\r\n\r\n    // for each potential shortcut\r\n    for (i = 0; i < _handlers[key].length; i++) {\r\n      handler = _handlers[key][i];\r\n\r\n      // see if it's in the current scope\r\n      if(handler.scope == scope || handler.scope == 'all'){\r\n        // check if modifiers match if any\r\n        modifiersMatch = handler.mods.length > 0;\r\n        for(k in _mods)\r\n          if((!_mods[k] && index(handler.mods, +k) > -1) ||\r\n            (_mods[k] && index(handler.mods, +k) == -1)) modifiersMatch = false;\r\n        // call the handler and stop the event if neccessary\r\n        if((handler.mods.length == 0 && !_mods[16] && !_mods[18] && !_mods[17] && !_mods[91]) || modifiersMatch){\r\n          if(handler.method(event, handler)===false){\r\n            if(event.preventDefault) event.preventDefault();\r\n              else event.returnValue = false;\r\n            if(event.stopPropagation) event.stopPropagation();\r\n            if(event.cancelBubble) event.cancelBubble = true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // unset modifier keys on keyup\r\n  function clearModifier(event){\r\n    var key = event.keyCode, k,\r\n        i = index(_downKeys, key);\r\n\r\n    // remove key from _downKeys\r\n    if (i >= 0) {\r\n        _downKeys.splice(i, 1);\r\n    }\r\n\r\n    if(key == 93 || key == 224) key = 91;\r\n    if(key in _mods) {\r\n      _mods[key] = false;\r\n      for(k in _MODIFIERS) if(_MODIFIERS[k] == key) assignKey[k] = false;\r\n    }\r\n  };\r\n\r\n  function resetModifiers() {\r\n    for(k in _mods) _mods[k] = false;\r\n    for(k in _MODIFIERS) assignKey[k] = false;\r\n  };\r\n\r\n  // parse and assign shortcut\r\n  function assignKey(key, scope, method){\r\n    var keys, mods;\r\n    keys = getKeys(key);\r\n    if (method === undefined) {\r\n      method = scope;\r\n      scope = 'all';\r\n    }\r\n\r\n    // for each shortcut\r\n    for (var i = 0; i < keys.length; i++) {\r\n      // set modifier keys if any\r\n      mods = [];\r\n      key = keys[i].split('+');\r\n      if (key.length > 1){\r\n        mods = getMods(key);\r\n        key = [key[key.length-1]];\r\n      }\r\n      // convert to keycode and...\r\n      key = key[0]\r\n      key = code(key);\r\n      // ...store handler\r\n      if (!(key in _handlers)) _handlers[key] = [];\r\n      _handlers[key].push({ shortcut: keys[i], scope: scope, method: method, key: keys[i], mods: mods });\r\n    }\r\n  };\r\n\r\n  // unbind all handlers for given key in current scope\r\n  function unbindKey(key, scope) {\r\n    var multipleKeys, keys,\r\n      mods = [],\r\n      i, j, obj;\r\n\r\n    multipleKeys = getKeys(key);\r\n\r\n    for (j = 0; j < multipleKeys.length; j++) {\r\n      keys = multipleKeys[j].split('+');\r\n\r\n      if (keys.length > 1) {\r\n        mods = getMods(keys);\r\n      }\r\n\r\n      key = keys[keys.length - 1];\r\n      key = code(key);\r\n\r\n      if (scope === undefined) {\r\n        scope = getScope();\r\n      }\r\n      if (!_handlers[key]) {\r\n        return;\r\n      }\r\n      for (i = 0; i < _handlers[key].length; i++) {\r\n        obj = _handlers[key][i];\r\n        // only clear handlers if correct scope and mods match\r\n        if (obj.scope === scope && compareArray(obj.mods, mods)) {\r\n          _handlers[key][i] = {};\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  // Returns true if the key with code 'keyCode' is currently down\r\n  // Converts strings into key codes.\r\n  function isPressed(keyCode) {\r\n      if (typeof(keyCode)=='string') {\r\n        keyCode = code(keyCode);\r\n      }\r\n      return index(_downKeys, keyCode) != -1;\r\n  }\r\n\r\n  function getPressedKeyCodes() {\r\n      return _downKeys.slice(0);\r\n  }\r\n\r\n  function filter(event){\r\n    var tagName = (event.target || event.srcElement).tagName;\r\n    // ignore keypressed in any elements that support keyboard data input\r\n    return !(tagName == 'INPUT' || tagName == 'SELECT' || tagName == 'TEXTAREA');\r\n  }\r\n\r\n  // initialize key.<modifier> to false\r\n  for(k in _MODIFIERS) assignKey[k] = false;\r\n\r\n  // set current scope (default 'all')\r\n  function setScope(scope){ _scope = scope || 'all' };\r\n  function getScope(){ return _scope || 'all' };\r\n\r\n  // delete all handlers for a given scope\r\n  function deleteScope(scope){\r\n    var key, handlers, i;\r\n\r\n    for (key in _handlers) {\r\n      handlers = _handlers[key];\r\n      for (i = 0; i < handlers.length; ) {\r\n        if (handlers[i].scope === scope) handlers.splice(i, 1);\r\n        else i++;\r\n      }\r\n    }\r\n  };\r\n\r\n  // abstract key logic for assign and unassign\r\n  function getKeys(key) {\r\n    var keys;\r\n    key = key.replace(/\\s/g, '');\r\n    keys = key.split(',');\r\n    if ((keys[keys.length - 1]) == '') {\r\n      keys[keys.length - 2] += ',';\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  // abstract mods logic for assign and unassign\r\n  function getMods(key) {\r\n    var mods = key.slice(0, key.length - 1);\r\n    for (var mi = 0; mi < mods.length; mi++)\r\n    mods[mi] = _MODIFIERS[mods[mi]];\r\n    return mods;\r\n  }\r\n\r\n  // cross-browser events\r\n  function addEvent(object, event, method) {\r\n    if (object.addEventListener)\r\n      object.addEventListener(event, method, false);\r\n    else if(object.attachEvent)\r\n      object.attachEvent('on'+event, function(){ method(window.event) });\r\n  };\r\n\r\n  // set the handlers globally on document\r\n  addEvent(document, 'keydown', function(event) { dispatch(event) }); // Passing _scope to a callback to ensure it remains the same by execution. Fixes #48\r\n  addEvent(document, 'keyup', clearModifier);\r\n\r\n  // reset modifiers to false whenever the window is (re)focused.\r\n  addEvent(window, 'focus', resetModifiers);\r\n\r\n  // store previously defined key\r\n  var previousKey = global.key;\r\n\r\n  // restore previously defined key and return reference to our key object\r\n  function noConflict() {\r\n    var k = global.key;\r\n    global.key = previousKey;\r\n    return k;\r\n  }\r\n\r\n  // set window.key and window.key.set/get/deleteScope, and the default filter\r\n  global.key = assignKey;\r\n  global.key.setScope = setScope;\r\n  global.key.getScope = getScope;\r\n  global.key.deleteScope = deleteScope;\r\n  global.key.filter = filter;\r\n  global.key.isPressed = isPressed;\r\n  global.key.getPressedKeyCodes = getPressedKeyCodes;\r\n  global.key.noConflict = noConflict;\r\n  global.key.unbind = unbindKey;\r\n\r\n  if(true) module.exports = assignKey;\r\n\r\n})(this);\r\n\n\n//# sourceURL=webpack://ui/./public/scripts/keymaster.js?");

/***/ }),

/***/ "./public/scripts/main.js":
/*!********************************!*\
  !*** ./public/scripts/main.js ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("// Global variable to keep track of CapsLock\r\n\r\nvar history = __webpack_require__(/*! ./history */ \"./public/scripts/history.js\")\r\n\r\nvar caps = false;\r\nvar allData ;\r\nvar reqKeys = []\r\nvar typewriter;\r\nvar quesNo;\r\nlet pressed = new Set();\r\n\r\n// event.keyCode Chrome and Firefox\r\nconst CHROME_LEFT_COMMAND_CODE = 91;\r\nconst CHROME_RIGHT_COMMAND_CODE = 93;\r\nconst FIREFOX_COMMAND_CODE = 224;\r\n\r\n// e.code for Chrome and Firefox\r\nconst FIREFOX_LEFT_COMMAND_STRING = 'OSLeft';\r\nconst FIREFOX_RIGHT_COMMAND_STRING = 'OSRight';\r\nconst CHROME_LEFT_COMMAND_STRING = 'MetaLeft';\r\nconst CHROME_RIGHT_COMMAND_STRING = 'MetaRight';\r\n\r\n// this tracks when we started asking for the current key command\r\nlet questionStartMS = 0;\r\n\r\n$(document).ready(function() {\r\n  //$(\"#retryButton\").toggleClass(\"on\");\r\n  //alert($('li[data-keycode=\"test\"]').attr('id'));\r\n  $.getJSON( \"scripts/shortcuts.json\", function( data ) {\r\n    allData = data;\r\n    if(localStorage.getItem(\"questionNo\")==null){\r\n      localStorage.setItem(\"questionNo\", \"1\");\r\n      localStorage.setItem(\"totalCount\", Object.keys(allData).length);\r\n    }\r\n    // Call readText()\r\n    readText()\r\n    \r\n    updateTimingDisplay();\r\n  })\r\n\r\n  $('.container').css('height', $(window).height());\r\n  $(window).on('resize', function() {\r\n    $('.container').css('height', $(window).height());\r\n  });\r\n});\r\n\r\nwindow.nextQuestion = function() {\r\n  if(localStorage.getItem(\"questionNo\")!=null){\r\n    if(parseInt(localStorage.getItem(\"questionNo\"))<parseInt(localStorage.getItem(\"totalCount\"))){\r\n      localStorage.setItem(\"questionNo\", parseInt(localStorage.getItem(\"questionNo\"))+1);\r\n    } else {\r\n      localStorage.setItem(\"questionNo\",\"1\");\r\n    }\r\n  }\r\n  clearPromptKeys();\r\n  clearPressedKeys();\r\n  updateTimingDisplay();\r\n  reqKeys = [];\r\n  readText();\r\n}\r\n\r\nwindow.prevQuestion = function() {\r\n  if(localStorage.getItem(\"questionNo\")!=null){\r\n    if(parseInt(localStorage.getItem(\"questionNo\")) > 1) {\r\n      localStorage.setItem(\"questionNo\", parseInt(localStorage.getItem(\"questionNo\"))-1);\r\n    }\r\n  }\r\n  clearPromptKeys();\r\n  clearPressedKeys();\r\n  updateTimingDisplay();\r\n  reqKeys = [];\r\n  readText();\r\n}\r\n\r\n  // Function called on KeyDown to show Pressed key by adding class = 'pressed'\r\nfunction handle(e) {\r\n  var text1 = e.type +\r\n    ' key=' + e.key +\r\n    ' code=' + e.code\r\n\r\n  if(e.code.toLowerCase()==\"space\"){\r\n    $(\"#space\").toggleClass(\"pressed\");\r\n  }\r\n  if((e.which>=186 && e.which<=192)|| (e.which>=219 && e.which<=222)){\r\n    $(\"#\"+e.code.toLowerCase()).toggleClass(\"pressed\");\r\n  }\r\n  if(e.key.toLowerCase()==\"alt\" || e.key.toLowerCase()==\"shift\" || e.key.toLowerCase()==\"meta\"){\r\n    let keyString = e.code;\r\n    if(e.code == FIREFOX_LEFT_COMMAND_STRING) {\r\n      keyString = CHROME_LEFT_COMMAND_STRING\r\n    } else if (e.code == FIREFOX_RIGHT_COMMAND_STRING) {\r\n      keyString = CHROME_RIGHT_COMMAND_STRING\r\n    }\r\n    $(\"#\"+keyString.toLowerCase()).toggleClass(\"pressed\");\r\n  }\r\n  if(e.key.toLowerCase()==\"capslock\" && caps==false){\r\n    caps= true;\r\n    $(\"#\"+e.key.toLowerCase()).toggleClass(\"pressed\");\r\n    $('.letter').toggleClass('uppercase');\r\n  }\r\n  else if(e.key.toLowerCase()==\"capslock\" && caps==true) {\r\n    $(\"#\"+e.key.toLowerCase()).toggleClass(\"pressed\");\r\n    $('.letter').toggleClass('uppercase');\r\n    caps=false;\r\n  }\r\n  else $(\"#\"+e.key.toLowerCase() ).addClass(\"pressed\");\r\n}\r\n\r\n// Function called on KeyUp to reset the key by removing class = 'pressed'\r\nfunction release(e) {\r\n  if((e.which>=186 && e.which<=192)|| (e.which>=219 && e.which<=222)){\r\n    $(\"#\"+e.code.toLowerCase()).removeClass(\"pressed\");\r\n  }\r\n  if(e.key.toLowerCase()==\"alt\" || e.key.toLowerCase()==\"shift\" || e.key.toLowerCase()==\"meta\"){\r\n    let keyString = e.code;\r\n    if(e.code == FIREFOX_LEFT_COMMAND_STRING) {\r\n      keyString = CHROME_LEFT_COMMAND_STRING\r\n    } else if (e.code == FIREFOX_RIGHT_COMMAND_STRING) {\r\n      keyString = CHROME_RIGHT_COMMAND_STRING\r\n    }\r\n    $(\"#\"+keyString.toLowerCase()).removeClass(\"pressed\");\r\n  }\r\n  if(e.code.toLowerCase()==\"space\"){\r\n    $(\"#space\").removeClass(\"pressed\");\r\n  }\r\n  if(e.key.toLowerCase()==\"capslock\") return\r\n  else{\r\n    $(\"#\"+e.key.toLowerCase() ).removeClass(\"pressed\");\r\n  }\r\n}\r\n\r\n// May have to be removed. Not being used currently\r\nfunction highlightNextKey(params){\r\n  $(\"#\"+nxt.toLowerCase()).toggleClass(\"pressed\");\r\n  // <!-- var params = { width:1680, height:1050 }; -->\r\n  //   <!-- var str = jQuery.param( params ); -->\r\n  //   <!-- $( \"#results\" ).text( str ); -->\r\n}\r\n\r\nfunction promptKey2(key){\r\n  //if($('li[data-keycode=\"'+key+'\"]'[0]).hasClass('prompt')){\r\n  $($('li[data-keycode=\"'+key+'\"]')[0]).toggleClass(\"prompt\")\r\n  //}\r\n}\r\n\r\n// Function to highlight any key passed as input\r\nfunction promptKey(key){\r\n  // Handling all key types\r\n  if(key.length==1) $(\"#\"+key.toLowerCase()).toggleClass(\"prompt\");\r\n  else {\r\n    if(key.toLowerCase()=='ctrl'||key.toLowerCase()=='control')\r\n      $(\"#control\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='command' || key.toLowerCase()=='cmd'|| key.toLowerCase()==\"meta\")\r\n      $(\"#metaleft\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='fn')\r\n      $(\"#fnc\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='alt')\r\n      $(\"#optionleft\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='shift')\r\n      $(\"#shiftleft\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='esc')\r\n      $(\"#escape\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='space bar')\r\n      $(\"#space\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='tab')\r\n      $(\"#tab\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='tilde(~)')\r\n      $(\"#tilde\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='comma(,)')\r\n      $(\"#comma\").toggleClass(\"prompt\");\r\n    if(key.toLowerCase()=='underscore(_)')\r\n      $(\"#minus\").toggleClass(\"prompt\");\r\n  }\r\n}\r\n\r\n// Function to read the next combination of keys and highlight it on keyboard\r\nfunction readText(){\r\n  quesNo = localStorage.getItem(\"questionNo\")\r\n  if(quesNo!=null){\r\n    commandText = allData[parseInt(quesNo)-1].answer\r\n    answerkeys = allData[parseInt(quesNo)-1].keys\r\n    //commandText = \"A+Control\"  //$(\"#textdiv\").text(); // Will be taken from some other list type of a source.\r\n    //Each command will have an associated question text used in writeQuestion\r\n    var speed = 50\r\n    var i = 0;\r\n\r\n    // Call writeQuestion to add question on the top textarea\r\n    writeQuestion(allData[parseInt(localStorage.getItem(\"questionNo\"))-1].question)\r\n\r\n    $.each(answerkeys , function(index, val) {\r\n      reqKeys.push(val)\r\n      // Highlight the prompt keys\r\n      promptKey2(val)\r\n    });\r\n\r\n    /* commandText.split('+').forEach(function(c) {\r\n      if(c.toLowerCase()==\"command\"){\r\n        reqKeys.push(\"meta\")\r\n      }else if(c.toLowerCase()==\"option\"){\r\n        reqKeys.push(\"alt\")\r\n      }\r\n      else{\r\n        reqKeys.push(c)\r\n      }\r\n// Highlight the prompt keys\r\n      promptKey(c)\r\n\r\n    }); */\r\n\r\n    //key(commandText, function(){ onSuccess(...reqKeys)});\r\n  } // END IF for localStorage check\r\n}\r\n\r\nfunction writeQuestion(question) {\r\n  if(typewriter!=null) {\r\n      typewriter.state.eventQueue = [];\r\n    $('#textdiv span').first().text('');\r\n  } else {\r\n    typewriter = new Typewriter(document.getElementById('textdiv'), {\r\n      loop: false,\r\n      delay: 10\r\n    });\r\n  }\r\n  typewriter.typeString(question).start();\r\n\r\n  // and, finally, mark the beginning of asking the question\r\n  questionStartMS = Date.now();\r\n}\r\n\r\nfunction clearIncorrectIndication() {\r\n  $(\"#read\").removeClass('incorrect');\r\n};\r\n\r\nfunction clearPromptKeys() {\r\n  $('.prompt').removeClass('prompt');\r\n};\r\n\r\nfunction clearPressedKeys() {\r\n  pressed.clear();\r\n  $('.pressed').removeClass('pressed');\r\n};\r\n\r\nfunction updateTimingDisplay() {\r\n  $('#timing-feedback').html('');\r\n  var questionNo = localStorage.getItem('questionNo');\r\n  // grab the last bits of timing data\r\n  var timings = history.getHistory(questionNo).slice(-3);\r\n\r\n\r\n  // and then drop them into the boxes\r\n  timings.forEach(function(t, idx) {\r\n    var element = $('#timing-' + idx);\r\n    element.html(t / 1000 + ' sec');\r\n    element.show();\r\n  })\r\n\r\n  // hide the boxes if we don't have timing data\r\n  for (var i = timings.length; i < 3; i++) {\r\n    $('#timing-' + i).hide();\r\n  }\r\n}\r\n\r\nfunction onIncorrect() {\r\n  $('#textdiv').effect(\"shake\", { distance: 3 });\r\n  $(\"#read\").addClass('incorrect');\r\n  setTimeout(clearPressedKeys, 500);\r\n};\r\n\r\nfunction handleTimingFeedback(questionNo, curMS) {\r\n  var previousTimings = history.getHistory(questionNo);\r\n  if (previousTimings.length == 0) {\r\n    return;\r\n  }\r\n\r\n  var average = previousTimings.reduce(\r\n    function(acc, cur) { return acc + cur },\r\n    0,\r\n  ) / previousTimings.length;\r\n\r\n  var delta = average - curMS;\r\n\r\n  var template = null;\r\n  if (delta > 0) {\r\n    template = \"<br/>You were <span style='color:green;'>faster</span> by ${delta} sec!\";\r\n  }\r\n  if (delta < 0) {\r\n    template = \"<br/>You were <span style='color:red;'>slower</span> by ${delta} sec.\";\r\n  }\r\n  if (template === null) {\r\n    return;\r\n  }\r\n\r\n  // convert MS to S\r\n  delta = Math.abs(delta) / 1000;\r\n  // now we want to trunate to 2 decimals; the `+` will let us only use 2\r\n  // decimals if we actually need them, e.g., we want 1.5 not 1.50\r\n  // cf. https://stackoverflow.com/a/12830454\r\n  delta = +delta.toFixed(2);\r\n  $('#timing-feedback').html(template.replace('${delta}', delta));\r\n}\r\n\r\n// Function to execute when correct keys are pressed.\r\nfunction onSuccess() {\r\n  var questionNo = localStorage.getItem(\"questionNo\");\r\n  var thisAnswerMS = Date.now() - questionStartMS;\r\n  handleTimingFeedback(questionNo, thisAnswerMS);\r\n  recordAnswer(questionNo, thisAnswerMS);\r\n  saveHistory();\r\n  $('#textdiv span').first().text('Correct Keys pressed!');\r\n  clearPromptKeys();\r\n  clearPressedKeys();\r\n  confetti($(\"#confetti\").get(0), { spread: 180, startVelocity: 50, elementCount: 150 });\r\n  setTimeout(nextQuestion, 1500);\r\n}\r\n\r\ndocument.addEventListener('keydown', function(event) {\r\n  event.preventDefault();\r\n  clearIncorrectIndication();\r\n  if(localStorage.getItem(\"questionNo\")!=null){\r\n    if(quesNo!=localStorage.getItem(\"questionNo\")){\r\n      return;\r\n    }\r\n  }\r\n\r\n  // If used in Firefox, change command key code to be the same as that of Chrome\r\n  let keyCode = event.keyCode;\r\n  if (navigator.userAgent.search('Firefox') > 0 && keyCode == FIREFOX_COMMAND_CODE) {\r\n    keyCode = CHROME_LEFT_COMMAND_CODE;\r\n  }\r\n\r\n  // Make left and right command key the same\r\n  if (keyCode == CHROME_RIGHT_COMMAND_CODE) {\r\n    keyCode = CHROME_LEFT_COMMAND_CODE;\r\n  }\r\n\r\n  pressed.add(keyCode);\r\n  handle(event);\r\n  const keySet = new Set(reqKeys);\r\n  if (keySet.size <= pressed.size) {\r\n    for (let key of pressed) { // are all required keys pressed?\r\n      if (!keySet.has(key)) {\r\n        onIncorrect();\r\n        return;\r\n      }\r\n    }\r\n    // All the required keys are pressed\r\n    onSuccess();\r\n  }\r\n});\r\n\r\ndocument.addEventListener('keyup', function(event) {\r\n  event.preventDefault();\r\n  if(localStorage.getItem(\"questionNo\")!=null){\r\n    if(quesNo!=localStorage.getItem(\"questionNo\")) {\r\n      return;\r\n    }\r\n  }\r\n\r\n  // If used in Firefox, change command key code to be the same as that of Chrome\r\n  let keyCode = event.keyCode;\r\n  if (navigator.userAgent.search('Firefox') > 0 && keyCode == FIREFOX_COMMAND_CODE) {\r\n    keyCode = CHROME_LEFT_COMMAND_CODE;\r\n  }\r\n\r\n  // Make left and right command key the same\r\n  if (keyCode == CHROME_RIGHT_COMMAND_CODE) {\r\n    keyCode = CHROME_LEFT_COMMAND_CODE;\r\n  }\r\n\r\n  pressed.delete(keyCode);\r\n  release(event);\r\n});\r\n\r\nwindow.addEventListener('focus', function (e) {\r\n  // Chrome disables capturing certain commands like:\r\n  // Cmd+n, Cmd+t, Cmd+w\r\n  // Here, we're using window refocus to progress the game\r\n  clearPressedKeys();\r\n  if (reqKeys[0] && reqKeys[1] && reqKeys[0] === 91 &&\r\n    (reqKeys[1] === 78 || reqKeys[1] === 87 || reqKeys[1] === 84)) {\r\n    onSuccess();\r\n  }\r\n});\r\n\r\nsequelize.close(); \r\n\n\n//# sourceURL=webpack://ui/./public/scripts/main.js?");

/***/ }),

/***/ 0:
/*!*****************************************************************************************************************************!*\
  !*** multi ./public/scripts/history.js ./public/scripts/confetti.js ./public/scripts/main.js ./public/scripts/keymaster.js ***!
  \*****************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("__webpack_require__(/*! ./public/scripts/history.js */\"./public/scripts/history.js\");\n__webpack_require__(/*! ./public/scripts/confetti.js */\"./public/scripts/confetti.js\");\n__webpack_require__(/*! ./public/scripts/main.js */\"./public/scripts/main.js\");\nmodule.exports = __webpack_require__(/*! ./public/scripts/keymaster.js */\"./public/scripts/keymaster.js\");\n\n\n//# sourceURL=webpack://ui/multi_./public/scripts/history.js_./public/scripts/confetti.js_./public/scripts/main.js_./public/scripts/keymaster.js?");

/***/ })

/******/ });